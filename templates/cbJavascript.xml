<templateSet group="cbJavascript">
  <template name="descr" value="describe('$TESTNAME$', function () {&#10;    $END$&#10;});" description="mocha describe block" toReformat="false" toShortenFQNames="true">
    <variable name="TESTNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="it" value="it('$STATE$', function (done) {&#10;    $END$&#10;    done();&#10;});" description="mocha it statement" toReformat="false" toShortenFQNames="true">
    <variable name="STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="req" value="const $requireAs$ = require('$sourcePath$');" toReformat="false" toShortenFQNames="true">
    <variable name="sourcePath" expression="" defaultValue="requireAs" alwaysStopAt="true" />
    <variable name="requireAs" expression="camelCase(sourcePath)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="setint" value="setInterval($FUNC$, $PERIOD$);" shortcut="SPACE" description="setInterval" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PERIOD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="testemit" value="var cb = sinon.spy(completed);&#10;&#10;function completed() {&#10;&#10;    if(cb.callCount &lt; $recallCount$)&#10;        return;&#10;&#10;    expect(cb).to.have.been.called$calls$;&#10;    expect(cb).to.have.been.calledOn($context$);&#10;    expect(cb).to.have.been.calledWithExactly($args$);&#10;&#10;    done()&#10;}&#10;&#10;$END$" description="create a spy'ed callback function with tests for calls, args and context" toReformat="true" toShortenFQNames="true">
    <variable name="recallCount" expression="" defaultValue="&quot;0&quot;" alwaysStopAt="true" />
    <variable name="calls" expression="enum(&quot;Once&quot;,&quot;Twice&quot;,&quot;Thrice&quot;)" defaultValue="" alwaysStopAt="true" />
    <variable name="context" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="function" value="function $name$($args$) {&#10;&#10;    $END$&#10;    &#10;}" description="function block" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="args" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="protomethod" value="$class$.prototype.$method$ = function $method$($args$){&#10;    $END$&#10;}" description="add method to class prototype" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="clipboard()" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="&quot;myMethod&quot;" alwaysStopAt="true" />
    <variable name="args" expression="" defaultValue="&quot;args&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="es5class" value="var $Constructor$ = (function($options$){&#10;    &#10;    // private state&#10;    var $private1$;&#10;    &#10;    // constructor&#10;    function $Constructor$ ($options$) {&#10;        if (!(this instanceof $Constructor$))&#10;            return new $Constructor$($options$);&#10;            &#10;        // init private state&#10;        $private1$ = $END$;&#10;        &#10;        // init public instance state&#10;        this.$inst1$ = 0;&#10;        &#10;    }&#10;    &#10;    // public static members&#10;    $Constructor$.prototype.$accessor1$ = function $accessor1$($value1$){&#10;        if(typeof $value1$ === 'undefined') return $private1$;&#10;        $private1$ = $value1$;&#10;        return this;&#10;    };&#10;    $Constructor$.prototype.$method1$ = function $method1$(){&#10;    &#10;        return this;&#10;    }&#10;    &#10;    return $Constructor$&#10;})($options$);" description="create an ES5 class" toReformat="false" toShortenFQNames="true">
    <variable name="Constructor" expression="" defaultValue="&quot;Constructor" alwaysStopAt="true" />
    <variable name="private1" expression="" defaultValue="&quot;_&quot;" alwaysStopAt="true" />
    <variable name="options" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="inst1" expression="" defaultValue="&quot;inst1&quot;" alwaysStopAt="true" />
    <variable name="accessor1" expression="underscoresToCamelCase(private1)" defaultValue="" alwaysStopAt="true" />
    <variable name="value1" expression="" defaultValue="accessor1" alwaysStopAt="true" />
    <variable name="method1" expression="" defaultValue="&quot;method" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="protaccessor" value="$class$.prototype.$method$ = function $method$($member$){&#10;    if(typeof $member$ === 'undefined') return this.$member$;&#10;    this.$member$ = $member$;&#10;    return this;&#10;};&#10;$END$&#10;" description="puts a setter getter on the prototype" toReformat="false" toShortenFQNames="true">
    <variable name="class" expression="jsClassName()" defaultValue="" alwaysStopAt="true" />
    <variable name="method" expression="" defaultValue="&quot;member&quot;" alwaysStopAt="true" />
    <variable name="member" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="wrapdescr" value="describe('$TESTNAME$', function (done) {&#10;    $SELECTION$&#10;});&#10;$END$" description="wraps a describe arround selected it clauses" toReformat="false" toShortenFQNames="true">
    <variable name="TESTNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>